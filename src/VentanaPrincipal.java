
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * Interfaz gr√°fica del juego.
 *
 * @author arath
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /** Pila para el poste A. */
    Pila posteA;
    
    /** Pila para el poste B. */
    Pila posteB;
    
    /** Pila para el poste C. */
    Pila posteC;

    /** Variable que guarda el numero de discos que se elije para empezar el juego. */
    Integer numDiscos;
    
    /** Modelo para la tabla que corresponde a cada poste. */
    DefaultTableModel modeloPosteA, modeloPosteB, modeloPosteC;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        setTitle("Torres Hannoi");
        setLocationRelativeTo(null);
        setResizable(false);

        modeloPosteA = (DefaultTableModel) jTable_PosteA.getModel();
        modeloPosteA.setRowCount(10);

        modeloPosteB = (DefaultTableModel) jTable_PosteB.getModel();
        modeloPosteB.setRowCount(10);

        modeloPosteC = (DefaultTableModel) jTable_PosteC.getModel();
        modeloPosteC.setRowCount(10);

        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        jTable_PosteA.getColumnModel().getColumn(0).setCellRenderer(renderA);

        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        jTable_PosteB.getColumnModel().getColumn(0).setCellRenderer(renderB);

        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        jTable_PosteC.getColumnModel().getColumn(0).setCellRenderer(renderC);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_PosteA = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_PosteC = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_PosteB = new javax.swing.JTable();
        jButton_A2B = new javax.swing.JButton();
        jButton_A2C = new javax.swing.JButton();
        jButton_B2C = new javax.swing.JButton();
        jButton_B2A = new javax.swing.JButton();
        jButton_C2B = new javax.swing.JButton();
        jButton_C2A = new javax.swing.JButton();
        jComboBox_NumDiscos = new javax.swing.JComboBox<>();
        jLabel_NumDiscos = new javax.swing.JLabel();
        jButton_IniciarReiniciar = new javax.swing.JButton();
        jLabel_NumDiscos1 = new javax.swing.JLabel();
        jLabel_NumDiscos2 = new javax.swing.JLabel();
        jLabel_NumDiscos3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable_PosteA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Poste A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_PosteA.setAutoscrolls(false);
        jTable_PosteA.setFocusable(false);
        jTable_PosteA.setRowSelectionAllowed(false);
        jTable_PosteA.setShowHorizontalLines(false);
        jTable_PosteA.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable_PosteA);
        if (jTable_PosteA.getColumnModel().getColumnCount() > 0) {
            jTable_PosteA.getColumnModel().getColumn(0).setResizable(false);
        }

        jTable_PosteC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Poste C"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_PosteC.setAutoscrolls(false);
        jTable_PosteC.setFocusable(false);
        jTable_PosteC.setRowSelectionAllowed(false);
        jTable_PosteC.setShowHorizontalLines(false);
        jTable_PosteC.setShowVerticalLines(false);
        jScrollPane2.setViewportView(jTable_PosteC);
        if (jTable_PosteC.getColumnModel().getColumnCount() > 0) {
            jTable_PosteC.getColumnModel().getColumn(0).setResizable(false);
        }

        jTable_PosteB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Poste B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_PosteB.setAutoscrolls(false);
        jTable_PosteB.setFocusable(false);
        jTable_PosteB.setRowSelectionAllowed(false);
        jTable_PosteB.setShowHorizontalLines(false);
        jTable_PosteB.setShowVerticalLines(false);
        jScrollPane3.setViewportView(jTable_PosteB);
        if (jTable_PosteB.getColumnModel().getColumnCount() > 0) {
            jTable_PosteB.getColumnModel().getColumn(0).setResizable(false);
        }

        jButton_A2B.setText("B");
        jButton_A2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_A2BActionPerformed(evt);
            }
        });

        jButton_A2C.setText("C");
        jButton_A2C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_A2CActionPerformed(evt);
            }
        });

        jButton_B2C.setText("C");
        jButton_B2C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_B2CActionPerformed(evt);
            }
        });

        jButton_B2A.setText("A");
        jButton_B2A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_B2AActionPerformed(evt);
            }
        });

        jButton_C2B.setText("B");
        jButton_C2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_C2BActionPerformed(evt);
            }
        });

        jButton_C2A.setText("A");
        jButton_C2A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_C2AActionPerformed(evt);
            }
        });

        jComboBox_NumDiscos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel_NumDiscos.setText("Numero de discos");

        jButton_IniciarReiniciar.setText("Iniciar / Reiniciar juego");
        jButton_IniciarReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_IniciarReiniciarActionPerformed(evt);
            }
        });

        jLabel_NumDiscos1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_NumDiscos1.setText("Mover de A a poste:");
        jLabel_NumDiscos1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel_NumDiscos2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_NumDiscos2.setText("Mover de B a poste:");
        jLabel_NumDiscos2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel_NumDiscos3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_NumDiscos3.setText("Mover de C a poste:");
        jLabel_NumDiscos3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 18, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel_NumDiscos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_NumDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton_IniciarReiniciar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton_A2B, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_A2C, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(jButton_B2A, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_B2C, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(jButton_C2A, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_C2B, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(59, 59, 59))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_NumDiscos1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_NumDiscos2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_NumDiscos3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_NumDiscos1)
                    .addComponent(jLabel_NumDiscos2)
                    .addComponent(jLabel_NumDiscos3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_A2B)
                    .addComponent(jButton_A2C)
                    .addComponent(jButton_B2A)
                    .addComponent(jButton_B2C)
                    .addComponent(jButton_C2A)
                    .addComponent(jButton_C2B))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_NumDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_NumDiscos)
                    .addComponent(jButton_IniciarReiniciar))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_A2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_A2BActionPerformed

        moverA2B();

    }//GEN-LAST:event_jButton_A2BActionPerformed

    private void jButton_A2CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_A2CActionPerformed

        moverA2C();

    }//GEN-LAST:event_jButton_A2CActionPerformed

    private void jButton_B2CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_B2CActionPerformed

        moverB2C();

    }//GEN-LAST:event_jButton_B2CActionPerformed

    private void jButton_B2AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_B2AActionPerformed

        moverB2A();

    }//GEN-LAST:event_jButton_B2AActionPerformed

    private void jButton_C2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_C2BActionPerformed

        moverC2B();

    }//GEN-LAST:event_jButton_C2BActionPerformed

    private void jButton_C2AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_C2AActionPerformed

        moverC2A();

    }//GEN-LAST:event_jButton_C2AActionPerformed

    private void jButton_IniciarReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_IniciarReiniciarActionPerformed

        iniciarReiniciar();

    }//GEN-LAST:event_jButton_IniciarReiniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_A2B;
    private javax.swing.JButton jButton_A2C;
    private javax.swing.JButton jButton_B2A;
    private javax.swing.JButton jButton_B2C;
    private javax.swing.JButton jButton_C2A;
    private javax.swing.JButton jButton_C2B;
    private javax.swing.JButton jButton_IniciarReiniciar;
    private javax.swing.JComboBox<String> jComboBox_NumDiscos;
    private javax.swing.JLabel jLabel_NumDiscos;
    private javax.swing.JLabel jLabel_NumDiscos1;
    private javax.swing.JLabel jLabel_NumDiscos2;
    private javax.swing.JLabel jLabel_NumDiscos3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_PosteA;
    private javax.swing.JTable jTable_PosteB;
    private javax.swing.JTable jTable_PosteC;
    // End of variables declaration//GEN-END:variables

    private void iniciarReiniciar() {
        try {
            posteA = new Pila();
            posteB = new Pila();
            posteC = new Pila();

            numDiscos = Integer.parseInt(jComboBox_NumDiscos.getSelectedItem().toString());

            for (int i = numDiscos; i >= 1; i--) {
                Nodo disco = new Nodo();
                String datoDisco = "";

                for (int j = i; j > 0; j--) {
                    datoDisco += "#";
                }

                disco.setDato(datoDisco);
                posteA.push(disco);
            }

            mostrarPosteA();
            mostrarPosteB();
            mostrarPosteC();
        } catch (NumberFormatException e) {
            System.err.println("Error dentro del boton Iniciar/Reiniciar.\n" + e);
        }
    }

    /**
     * Este metodo muestra el comportamiento del poste A y lo grafica en la
     * tabla asignada a dicho poste en la GUI.
     */
    private void mostrarPosteA() {
        // Limpia el contenido de la tabla poste A y asigna el numero de filas.
        ((DefaultTableModel) jTable_PosteA.getModel()).setRowCount(0);
        modeloPosteA.setRowCount(10);

        int filaPoste = (10 - posteA.getContador());

        Nodo disco;

        // Colocar los datos en la tabla poste A.
        if (posteA.getContador() > 0) {
            for (disco = posteA.getPuntero(); disco.getAbajo() != null; disco = disco.getAbajo()) {
                String[] datoDisco = {disco.getDato()};
                modeloPosteA.insertRow(filaPoste, datoDisco);
                filaPoste++;
            }

            if (disco.getAbajo() == null) {
                String[] datoDisco = {disco.getDato()};
                modeloPosteA.insertRow(filaPoste, datoDisco);
            }
        }

        jTable_PosteA.setModel(modeloPosteA);
        modeloPosteA.setRowCount(10);
    }

    /**
     * Este metodo muestra el comportamiento del poste B y lo grafica en la
     * tabla asignada a dicho poste en la GUI.
     */
    private void mostrarPosteB() {
        // Limpia el contenido de la tabla poste B y asigna el numero de filas.
        ((DefaultTableModel) jTable_PosteB.getModel()).setRowCount(0);
        modeloPosteB.setRowCount(10);

        int filaPoste = (10 - posteB.getContador());

        Nodo disco;

        // Colocar los datos en la tabla poste B.
        if (posteB.getContador() > 0) {
            for (disco = posteB.getPuntero(); disco.getAbajo() != null; disco = disco.getAbajo()) {
                String[] datoDisco = {disco.getDato()};
                modeloPosteB.insertRow(filaPoste, datoDisco);
                filaPoste++;
            }

            if (disco.getAbajo() == null) {
                String[] datoDisco = {disco.getDato()};
                modeloPosteB.insertRow(filaPoste, datoDisco);
            }
        }

        jTable_PosteB.setModel(modeloPosteB);
        modeloPosteB.setRowCount(10);
    }

    /**
     * Este metodo muestra el comportamiento del poste C y lo grafica en la
     * tabla asignada a dicho poste en la GUI.
     */
    private void mostrarPosteC() {
        // Limpia el contenido de la tabla poste C y asignar el numero de filas.
        ((DefaultTableModel) jTable_PosteC.getModel()).setRowCount(0);
        modeloPosteC.setRowCount(10);

        int filaPoste = (10 - posteC.getContador());

        Nodo disco;

        // Colocar los datos en la tabla poste C.
        if (posteC.getContador() > 0) {
            for (disco = posteC.getPuntero(); disco.getAbajo() != null; disco = disco.getAbajo()) {
                String[] datoDisco = {disco.getDato()};
                modeloPosteC.insertRow(filaPoste, datoDisco);
                filaPoste++;
            }

            if (disco.getAbajo() == null) {
                String[] datoDisco = {disco.getDato()};
                modeloPosteC.insertRow(filaPoste, datoDisco);
            }
        }

        jTable_PosteC.setModel(modeloPosteC);
        modeloPosteC.setRowCount(10);
    }

    /**
     * Este metodo permite mover un disco desde el poste A al poste B.
     */
    private void moverA2B() {
        try {
            if (posteA.getContador() > 0) {
                Nodo cima = new Nodo();
                cima.setDato(posteA.peek());

                if (posteB.getContador() > 0) {
                    if (cima.getDato().compareTo(posteB.peek()) > 0) {
                        movimientoInvalido();
                        return;
                    }
                }

                posteA.pop();
                posteB.push(cima);

                mostrarPosteA();
                mostrarPosteB();
            }
        } catch (Exception e) {
            System.err.println("Error en metodo moverA2B().\n" + e);
        }
    }

    /**
     * Este metodo permite mover un disco desde el poste A al poste C.
     */
    private void moverA2C() {
        try {
            if (posteA.getContador() > 0) {
                Nodo cima = new Nodo();
                cima.setDato(posteA.peek());

                if (posteC.getContador() > 0) {
                    if (cima.getDato().compareTo(posteC.peek()) > 0) {
                        movimientoInvalido();
                        return;
                    }
                }

                posteA.pop();
                posteC.push(cima);

                mostrarPosteA();
                mostrarPosteC();

                if (posteC.getContador() == numDiscos) {
                    JOptionPane.showMessageDialog(null,
                            "¬°Ganaste! Haz pasado todos los discos al poste C.",
                            "¬°Excelente!", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
            System.err.println("Error en metodo moverA2C().\n" + e);
        }
    }

    /**
     * Este metodo permite mover un disco desde el poste B al poste A.
     */
    private void moverB2A() {
        try {
            if (posteB.getContador() > 0) {
                Nodo cima = new Nodo();
                cima.setDato(posteB.peek());

                if (posteA.getContador() > 0) {
                    if (cima.getDato().compareTo(posteA.peek()) > 0) {
                        movimientoInvalido();
                        return;
                    }
                }

                posteB.pop();
                posteA.push(cima);

                mostrarPosteA();
                mostrarPosteB();
            }
        } catch (Exception e) {
            System.err.println("Error en metodo moverB2A().\n" + e);
        }
    }

    /**
     * Este metodo permite mover un disco desde el poste B al poste C.
     */
    private void moverB2C() {
        try {
            if (posteB.getContador() > 0) {
                Nodo cima = new Nodo();
                cima.setDato(posteB.peek());

                if (posteC.getContador() > 0) {
                    if (cima.getDato().compareTo(posteC.peek()) > 0) {
                        movimientoInvalido();
                        return;
                    }
                }

                posteB.pop();
                posteC.push(cima);

                mostrarPosteB();
                mostrarPosteC();

                if (posteC.getContador() == numDiscos) {
                    JOptionPane.showMessageDialog(null,
                            "¬°Ganaste! Haz pasado todos los discos al poste C.",
                            "¬°Excelente!", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
            System.err.println("Error en metodo moverB2C().\n" + e);
        }
    }

    /**
     * Este metodo permite mover un disco desde el poste C al poste A.
     */
    private void moverC2A() {
        try {
            if (posteC.getContador() > 0) {
                Nodo cima = new Nodo();
                cima.setDato(posteC.peek());

                if (posteA.getContador() > 0) {
                    if (cima.getDato().compareTo(posteA.peek()) > 0) {
                        movimientoInvalido();
                        return;
                    }
                }

                posteC.pop();
                posteA.push(cima);

                mostrarPosteA();
                mostrarPosteC();
            }
        } catch (Exception e) {
            System.err.println("Error en metodo moverC2A().\n" + e);
        }
    }

    /**
     * Este metodo permite mover un disco desde el poste C al poste B.
     */
    private void moverC2B() {
        try {
            if (posteC.getContador() > 0) {
                Nodo cima = new Nodo();
                cima.setDato(posteC.peek());

                if (posteB.getContador() > 0) {
                    if (cima.getDato().compareTo(posteB.peek()) > 0) {
                        movimientoInvalido();
                        return;
                    }
                }

                posteC.pop();
                posteB.push(cima);

                mostrarPosteC();
                mostrarPosteB();
            }
        } catch (Exception e) {
            System.err.println("Error en metodo moverC2B().\n" + e);
        }
    }
    
    /**
     * Muestra un mensaje de advertencia cuando se intenta poner un disco de 
     * mayor diametro sobre uno de menor diametro.
     */
    private void movimientoInvalido() {
        JOptionPane.showMessageDialog(null, 
                "Un disco de mayor di√°metro no puede estar sobre uno de menor di√°metro.",
                "Movimiento inv√°lido", JOptionPane.WARNING_MESSAGE);
    }
}
